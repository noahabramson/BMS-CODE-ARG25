# Commandlist2Arduino Code converter

Be aware, this function is still in beta and might change a lot.

With this function, you can easily convert your command_list to arduino code. There are three options you have:
- Just conversion of a command list
- Check for a bit and print an error
- Check for a bit and jump to another command_list

The concept is really easy. Instead of sending the data to the SDP-K1, it will create an arduino script of the SPI-Data.
There is no PEC check or CCNT. It's a really dumb and simple script. It can be very useful if you have to send a command 100K times to verify some behaviour.

## Step 1: Create a command_list and a board_list

This is the same a normal. Create a command list like you would normally. Also, make sure you have a board_list like you would have normally.
board_list
```python
board_list = [{'Device': ADBMS2950}]
```
command_list
```python
    init_list = [
        {"command": "ADI1", "arguments": {"RD": True, "OPT": 8}},
        {"command": "WRCFGA", "arguments": {
            "GPO1C": True,
            "GPO2C": True,
            "GPO3C": False,
            "GPO1OD": False,
            "GPO2OD": False,
            "GPO3OD": False,
            'VB1MUX': 0,
            'VB2MUX': 0}
         },
        {"command": "$DELAY_MS$", "arguments": {"Delay": 10}},
        {"command": "$SPI_WAKEUP$", "arguments": {"Wakeup Time": 10}},
        {"command": "ADI1", "arguments": {"RD": True, "OPT": 8}},
    ]
```

## Step 2: Create a ArduinoConverter Object

Create a ArduinoConvert object. I called it bms, but you can also call it something else.

```python
bms = ArduinoConverter()
```

## Step 3: Convert the command_list and add it to the object

In this step, you can convert the command_list to an arduino script. You can do this step multiple times. You have some options here:

- command_list: the command list variable like any scratchpad
- board_list: the board list like any scratchpad
- init_list=False: if you only want to run this once during startup, set init_list to True. Otherwise it will be looped
- jp_list=False: if you want to jump to this list when something happens, make sure to set it to True.
- list_name='auto_gen': you can also name your list yourself. If not, it will be named: type{cnt} where cnt is the amount of times you called the `convert_command_list` function. For example, if you converted three command_lists, they will be called loop0, loop1 and loop2.
- print2serial=0; if you want to print the data to serial, set this value to 1

Here is an example of how it could look:

```python
    # # Tell the converter the convert the list. init_list will only run one time. If this is false, it will loop
    # # You can call the function multiple times. It will add them to the object.
    bms.convert_command_list(init_list, board_list, init_list=True)
    # # This is an example of loop list. The object will automagic create a new name for every command_list.
    # # You can however also define this yourself.
    bms.convert_command_list(command_list, board_list)
    bms.convert_command_list(bonus_list, board_list)
    bms.convert_command_list(jp_list, board_list, jp_list=True)
```

## Step 4: Create the result.ino script

After you have converted your command_lists, you want to make a ino file. You this by calling:

```python
    bms.compile_template("template.ino", "result.ino")
```

template.ino is the template file from which the script is based. You usually don't have to change anything here. result.ino is the result file

## Arduino library

The generated Arduino script does make use of an Arduino Library called SPI_Com. 
You can find this in the SPI_Com folder. 
It consists of two files that have to be added to the arduino project. 
You can also import them directly into Arduino. 
The files that are required are:
- SPI_Com.cpp
- SPI_COM.h

## Advanced Features: err or jp functions

It is possible to automagicly create error or jump functions. 
There are two options. 

### ERR

The most simple one, is the error function. 
You can use this, if you want to know if a bitfield is set. Let say, you want to know if SNAPST is set.
If this is the case, you want to print 'An error has occured to the serial port' of the arduino. 
To do this, you have to give the following command:

```python
{"command": "RDCFGA", "arguments": {}, "map_key": "$SNAPST==1;err$"},
```

In the map_key, you tell what you want to do. If *SNAPST == 1*, show error. You can only do this for bitfields in the command. 
At the moment **only 1 bytes in the register is supported**. In other words, if a bitfields takes 2 bytes, it is not possible at the moment.
If a bitfield is spread over multiple registers, it is not supported at the moment. However, up to a byte is supported. 
ACCI, FC are no problem. You can simply say `$ACCI==3;err$`. 

### JP

However, in some cases, you want to do a exit routine. This can be done with JP. To do this, it's very similiar to ERR. 
Simply give the following command. In map_key, you can see how this works

```python
{"command": "RDCFGA", "arguments": {}, "map_key": "$SNAPST==1;jp jp1$"},
```

If SNAPST==1, it will go to *jp1*. After that, it will go back to the normal routine. jp1 has to be created just like a normal command_list. 
Be aware that if you want this, you have to make sure `jp_list=True`. This would look like this:
```python
bms.convert_command_list(jp_list, board_list, jp_list=True)
```
You can give the jump_list a name yourself. If you don't want this, simply count how many times you have called `bms.convert_command_list()`. 
**The counting starts at zero**


